package Tests;

import controllers.InMemoryTaskManager;
import controllers.TaskManager;
import model.Epic;
import model.Subtask;
import model.Task;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

public class InMemoryTaskManagerTests {

    private TaskManager taskManager;

    @BeforeEach
    void setUp() {
        taskManager = new InMemoryTaskManager(); // Инициализация перед каждым тестом
    }

    //InMemoryTaskManager действительно добавляет задачи разного типа и может найти их по id;
    @Test
    public void testAddAndGetTasksByType() {
        Task task = new Task("Задача 1", "Описание задачи 1");
        int taskId = taskManager.addNewTask(task);

        Subtask subtask = new Subtask("Подзадача 1", "Описание подзадачи 1", 1);
        int subtaskId = taskManager.addNewSubtask(subtask);

        Epic epic = new Epic("Эпик 1", "Описание эпика 1");
        int epicId = taskManager.addNewEpic(epic);

        assertEquals(taskId, task.getId(), "ID задачи после добавления должен совпадать с заданным ID.");
        assertEquals(subtaskId, subtask.getId(), "ID подзадачи после добавления должен совпадать с заданным ID.");
        assertEquals(epicId, epic.getId(), "ID эпика после добавления должен совпадать с заданным ID.");

        ArrayList<Task> allTasks = taskManager.getTasks();
        assertTrue(allTasks.contains(task), "Задача должна быть найдена в коллекции задач.");

        ArrayList<Subtask> allSubtasks = taskManager.getSubtasks();
        assertTrue(allSubtasks.contains(subtask), "Подзадача должна быть найдена в коллекции подзадач.");

        ArrayList<Epic> allEpics = taskManager.getEpics();
        assertTrue(allEpics.contains(epic), "Эпик должен быть найден в коллекции эпиков.");
    }

    //что задачи с заданным id и сгенерированным id не конфликтуют внутри менеджера
    @Test
    public void testNoConflictBetweenKnownAndGeneratedId() {
        // Инициализация менеджера
        InMemoryTaskManager taskManager = new InMemoryTaskManager();

        // Задача с заданным ID
        Task knownIdTask = new Task("Задача с известным ID", "Описание задачи");
        knownIdTask.setId(10); // Установка известного ID

        // Добавление задачи с известным ID
        int knownId = 10; // Предполагаем, что ID 10 еще не используется
        taskManager.addNewTask(knownIdTask);

        // Добавление новой задачи, позволяя системе генерировать ID
        Task autoGeneratedTask = new Task("Задача с сгенерированным ID", "Еще одно описание");
        int generatedId = taskManager.addNewTask(autoGeneratedTask);

        // Проверка, что задачи с известным и сгенерированным ID присутствуют в менеджере
        ArrayList<Task> allTasks = taskManager.getTasks();
        assertTrue(allTasks.contains(knownIdTask), "Задача с известным ID должна быть найдена.");
        assertTrue(allTasks.contains(autoGeneratedTask), "Задача с сгенерированным ID должна быть найдена.");

        // Проверка уникальности ID
        assertNotEquals(knownIdTask.getId(), generatedId, "ID задачи с известным ID и сгенерированным ID не должны совпадать.");
    }

    // проверяется неизменность задачи (по всем полям) при добавлении задачи в менеджер
    @Test
    public void testTaskRemainsUnchangedAfterAdding() {
        // Инициализация менеджера
        InMemoryTaskManager taskManager = new InMemoryTaskManager();

        // Создание задачи с известными данными
        Task originalTask = new Task("Оригинальная задача", "Описание задачи");
        int originalId = originalTask.getId();

        // Снимок состояния задачи до добавления
        String originalName = originalTask.getName();
        String originalDescription = originalTask.getDescription();
        originalId = originalTask.getId();

        // Добавление задачи в менеджер
        taskManager.addNewTask(originalTask);

        // Получение всех задач после добавления
        ArrayList<Task> allTasks = taskManager.getTasks();

        // Поиск добавленной задачи среди всех задач
        for (Task task : allTasks) {
            if (task.getId() == originalId) {
                // Сравнение полей добавленной задачи с оригиналом
                assertEquals(originalName, task.getName(), "Имя задачи должно остаться неизменным.");
                assertEquals(originalDescription, task.getDescription(), "Описание задачи должно остаться неизменным.");
                break;
            }
        }
    }
}
